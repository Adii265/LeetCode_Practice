class Solution {
public:
    bool isIsomorphic(string s, string t) 
    {
        map <char,char> mp1;
        map <char,char> mp2;
        for(int i = 0 ; i < s.length();i++)
        {
            mp1.insert({t[i],s[i]});
            mp2.insert({s[i],t[i]});
            
            if(mp1.count(t[i])>0 or mp2.count(s[i])>0)
            {    if(mp1[t[i]] != s[i] or mp2[s[i]] != t[i])
                {
                return false;
                } 
            }
        }
        /*map<char, char>::iterator it = mp1.begin();
        while (it != mp1.end())
        {
            cout<< it->first<<it->second <<endl;
            ++it;
        }
        map<char, char>::iterator it1 = mp2.begin();
        while (it1 != mp2.end())
        {
            cout<< it1->first<<it1->second <<endl;
            ++it;
        }*/
        return true;
    }
};