//C++ Solution with efficient memory
class Solution {
public:
    int maxSubArray(vector<int>& nums) 
    {
        if(nums.size() == 1)
            return nums[0];
        int s = 0;
        int g_max = nums[0];
        for(int i = 0; i< nums.size(); i++)
        {
            s = max(nums[i],nums[i]+s);
            g_max = max(g_max, s);
        }    
        return g_max;
    }
};


//Java solution with efficient time
class Solution {
    public int maxSubArray(int[] nums) 
    {
        int max1 = nums[0];
        int max2 = 0;
        for(int i = 0;i<nums.length;i++)
        {
            max2 = Math.max(max2+nums[i],nums[i]);
            max1 = Math.max(max1,max2);
        }
        
        return max1;
    }
}


// Compares max of subarrays[0-i] with the ith element and puts the maximum sum as the max value.



